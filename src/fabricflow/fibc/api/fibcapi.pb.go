// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fibcapi.proto

/*
Package fibcapi is a generated protocol buffer package.

It is generated from these files:
	fibcapi.proto

It has these top-level messages:
	Hello
	DpStatus
	PortStatus
	PortConfig
	FlowMod
	GroupMod
	VLANFlow
	TerminationMacFlow
	MPLSFlow
	UnicastRoutingFlow
	BridgingFlow
	PolicyACLFlow
	L2InterfaceGroup
	L3UnicastGroup
	MPLSInterfaceGroup
	MPLSLabelGroup
*/
package fibcapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// FF Message types
type FFM int32

const (
	FFM_UNSPEC      FFM = 0
	FFM_HELLO       FFM = 1
	FFM_PORT_STATUS FFM = 2
	FFM_PORT_CONFIG FFM = 3
	FFM_FLOW_MOD    FFM = 4
	FFM_GROUP_MOD   FFM = 5
	FFM_DP_STATUS   FFM = 6
)

var FFM_name = map[int32]string{
	0: "UNSPEC",
	1: "HELLO",
	2: "PORT_STATUS",
	3: "PORT_CONFIG",
	4: "FLOW_MOD",
	5: "GROUP_MOD",
	6: "DP_STATUS",
}
var FFM_value = map[string]int32{
	"UNSPEC":      0,
	"HELLO":       1,
	"PORT_STATUS": 2,
	"PORT_CONFIG": 3,
	"FLOW_MOD":    4,
	"GROUP_MOD":   5,
	"DP_STATUS":   6,
}

func (x FFM) String() string {
	return proto.EnumName(FFM_name, int32(x))
}
func (FFM) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DpStatus_Status int32

const (
	DpStatus_NOP   DpStatus_Status = 0
	DpStatus_ENTER DpStatus_Status = 1
	DpStatus_LEAVE DpStatus_Status = 2
)

var DpStatus_Status_name = map[int32]string{
	0: "NOP",
	1: "ENTER",
	2: "LEAVE",
}
var DpStatus_Status_value = map[string]int32{
	"NOP":   0,
	"ENTER": 1,
	"LEAVE": 2,
}

func (x DpStatus_Status) String() string {
	return proto.EnumName(DpStatus_Status_name, int32(x))
}
func (DpStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type PortStatus_Status int32

const (
	PortStatus_NOP  PortStatus_Status = 0
	PortStatus_UP   PortStatus_Status = 1
	PortStatus_DOWN PortStatus_Status = 2
)

var PortStatus_Status_name = map[int32]string{
	0: "NOP",
	1: "UP",
	2: "DOWN",
}
var PortStatus_Status_value = map[string]int32{
	"NOP":  0,
	"UP":   1,
	"DOWN": 2,
}

func (x PortStatus_Status) String() string {
	return proto.EnumName(PortStatus_Status_name, int32(x))
}
func (PortStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type PortConfig_Cmd int32

const (
	PortConfig_NOP    PortConfig_Cmd = 0
	PortConfig_ADD    PortConfig_Cmd = 1
	PortConfig_MODIFY PortConfig_Cmd = 2
	PortConfig_DELETE PortConfig_Cmd = 3
)

var PortConfig_Cmd_name = map[int32]string{
	0: "NOP",
	1: "ADD",
	2: "MODIFY",
	3: "DELETE",
}
var PortConfig_Cmd_value = map[string]int32{
	"NOP":    0,
	"ADD":    1,
	"MODIFY": 2,
	"DELETE": 3,
}

func (x PortConfig_Cmd) String() string {
	return proto.EnumName(PortConfig_Cmd_name, int32(x))
}
func (PortConfig_Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type FlowMod_Cmd int32

const (
	FlowMod_NOP           FlowMod_Cmd = 0
	FlowMod_ADD           FlowMod_Cmd = 1
	FlowMod_MODIFY        FlowMod_Cmd = 2
	FlowMod_MODIFY_STRICT FlowMod_Cmd = 3
	FlowMod_DELETE        FlowMod_Cmd = 4
	FlowMod_DELETE_STRICT FlowMod_Cmd = 5
)

var FlowMod_Cmd_name = map[int32]string{
	0: "NOP",
	1: "ADD",
	2: "MODIFY",
	3: "MODIFY_STRICT",
	4: "DELETE",
	5: "DELETE_STRICT",
}
var FlowMod_Cmd_value = map[string]int32{
	"NOP":           0,
	"ADD":           1,
	"MODIFY":        2,
	"MODIFY_STRICT": 3,
	"DELETE":        4,
	"DELETE_STRICT": 5,
}

func (x FlowMod_Cmd) String() string {
	return proto.EnumName(FlowMod_Cmd_name, int32(x))
}
func (FlowMod_Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type FlowMod_Table int32

const (
	FlowMod_INGRESS_PORT      FlowMod_Table = 0
	FlowMod_VLAN              FlowMod_Table = 10
	FlowMod_TERM_MAC          FlowMod_Table = 20
	FlowMod_L3_TYPE           FlowMod_Table = 21
	FlowMod_MPLS0             FlowMod_Table = 23
	FlowMod_MPLS1             FlowMod_Table = 24
	FlowMod_MPLS2             FlowMod_Table = 25
	FlowMod_MPLS_L3_TYPE      FlowMod_Table = 27
	FlowMod_MPLS_LABEL_TRUST  FlowMod_Table = 28
	FlowMod_MPLS_TYPE         FlowMod_Table = 29
	FlowMod_UNICAST_ROUTING   FlowMod_Table = 30
	FlowMod_MULTICAST_ROUTING FlowMod_Table = 40
	FlowMod_BRIDGING          FlowMod_Table = 50
	FlowMod_POLICY_ACL        FlowMod_Table = 60
)

var FlowMod_Table_name = map[int32]string{
	0:  "INGRESS_PORT",
	10: "VLAN",
	20: "TERM_MAC",
	21: "L3_TYPE",
	23: "MPLS0",
	24: "MPLS1",
	25: "MPLS2",
	27: "MPLS_L3_TYPE",
	28: "MPLS_LABEL_TRUST",
	29: "MPLS_TYPE",
	30: "UNICAST_ROUTING",
	40: "MULTICAST_ROUTING",
	50: "BRIDGING",
	60: "POLICY_ACL",
}
var FlowMod_Table_value = map[string]int32{
	"INGRESS_PORT":      0,
	"VLAN":              10,
	"TERM_MAC":          20,
	"L3_TYPE":           21,
	"MPLS0":             23,
	"MPLS1":             24,
	"MPLS2":             25,
	"MPLS_L3_TYPE":      27,
	"MPLS_LABEL_TRUST":  28,
	"MPLS_TYPE":         29,
	"UNICAST_ROUTING":   30,
	"MULTICAST_ROUTING": 40,
	"BRIDGING":          50,
	"POLICY_ACL":        60,
}

func (x FlowMod_Table) String() string {
	return proto.EnumName(FlowMod_Table_name, int32(x))
}
func (FlowMod_Table) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

type GroupMod_Cmd int32

const (
	GroupMod_NOP    GroupMod_Cmd = 0
	GroupMod_ADD    GroupMod_Cmd = 1
	GroupMod_MODIFY GroupMod_Cmd = 2
	GroupMod_DELETE GroupMod_Cmd = 3
)

var GroupMod_Cmd_name = map[int32]string{
	0: "NOP",
	1: "ADD",
	2: "MODIFY",
	3: "DELETE",
}
var GroupMod_Cmd_value = map[string]int32{
	"NOP":    0,
	"ADD":    1,
	"MODIFY": 2,
	"DELETE": 3,
}

func (x GroupMod_Cmd) String() string {
	return proto.EnumName(GroupMod_Cmd_name, int32(x))
}
func (GroupMod_Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type GroupMod_GType int32

const (
	GroupMod_UNSPEC           GroupMod_GType = 0
	GroupMod_L2_INTERFACE     GroupMod_GType = 1
	GroupMod_L2_REWRITE       GroupMod_GType = 16
	GroupMod_L3_UNICAST       GroupMod_GType = 32
	GroupMod_L2_MULTICAST     GroupMod_GType = 48
	GroupMod_L2_FLOOD         GroupMod_GType = 64
	GroupMod_L3_INTERFACE     GroupMod_GType = 80
	GroupMod_L3_MULTICAST     GroupMod_GType = 96
	GroupMod_L3_ECMP          GroupMod_GType = 112
	GroupMod_L2_OVERLAY_FL_UC GroupMod_GType = 128
	GroupMod_L2_OVERLAY_FL_MC GroupMod_GType = 129
	GroupMod_L2_OVERLAY_MC_UC GroupMod_GType = 130
	GroupMod_L2_OVERLAY_MC_MC GroupMod_GType = 131
	GroupMod_MPLS_INTERFACE   GroupMod_GType = 144
	GroupMod_MPLS_L2_VPN      GroupMod_GType = 145
	GroupMod_MPLS_L3_VPN      GroupMod_GType = 146
	GroupMod_MPLS_TUNNEL1     GroupMod_GType = 147
	GroupMod_MPLS_TUNNEL2     GroupMod_GType = 148
	GroupMod_MPLS_SWAP        GroupMod_GType = 149
	GroupMod_MPLS_FF          GroupMod_GType = 166
	GroupMod_MPLS_ECMP        GroupMod_GType = 168
	GroupMod_L2_UF_INTERFACE  GroupMod_GType = 176
)

var GroupMod_GType_name = map[int32]string{
	0:   "UNSPEC",
	1:   "L2_INTERFACE",
	16:  "L2_REWRITE",
	32:  "L3_UNICAST",
	48:  "L2_MULTICAST",
	64:  "L2_FLOOD",
	80:  "L3_INTERFACE",
	96:  "L3_MULTICAST",
	112: "L3_ECMP",
	128: "L2_OVERLAY_FL_UC",
	129: "L2_OVERLAY_FL_MC",
	130: "L2_OVERLAY_MC_UC",
	131: "L2_OVERLAY_MC_MC",
	144: "MPLS_INTERFACE",
	145: "MPLS_L2_VPN",
	146: "MPLS_L3_VPN",
	147: "MPLS_TUNNEL1",
	148: "MPLS_TUNNEL2",
	149: "MPLS_SWAP",
	166: "MPLS_FF",
	168: "MPLS_ECMP",
	176: "L2_UF_INTERFACE",
}
var GroupMod_GType_value = map[string]int32{
	"UNSPEC":           0,
	"L2_INTERFACE":     1,
	"L2_REWRITE":       16,
	"L3_UNICAST":       32,
	"L2_MULTICAST":     48,
	"L2_FLOOD":         64,
	"L3_INTERFACE":     80,
	"L3_MULTICAST":     96,
	"L3_ECMP":          112,
	"L2_OVERLAY_FL_UC": 128,
	"L2_OVERLAY_FL_MC": 129,
	"L2_OVERLAY_MC_UC": 130,
	"L2_OVERLAY_MC_MC": 131,
	"MPLS_INTERFACE":   144,
	"MPLS_L2_VPN":      145,
	"MPLS_L3_VPN":      146,
	"MPLS_TUNNEL1":     147,
	"MPLS_TUNNEL2":     148,
	"MPLS_SWAP":        149,
	"MPLS_FF":          166,
	"MPLS_ECMP":        168,
	"L2_UF_INTERFACE":  176,
}

func (x GroupMod_GType) String() string {
	return proto.EnumName(GroupMod_GType_name, int32(x))
}
func (GroupMod_GType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 1} }

type VLANFlow_Action_Name int32

const (
	VLANFlow_Action_UNSPEC           VLANFlow_Action_Name = 0
	VLANFlow_Action_SET_VLAN_VID     VLANFlow_Action_Name = 1
	VLANFlow_Action_SET_VRF          VLANFlow_Action_Name = 2
	VLANFlow_Action_SET_OVID         VLANFlow_Action_Name = 3
	VLANFlow_Action_SET_MPLS_TYPE    VLANFlow_Action_Name = 4
	VLANFlow_Action_PUSH_VLAN        VLANFlow_Action_Name = 5
	VLANFlow_Action_POP_VLAN         VLANFlow_Action_Name = 6
	VLANFlow_Action_SET_MPLS_L2_TYPE VLANFlow_Action_Name = 7
	VLANFlow_Action_SET_TUNNEL_ID    VLANFlow_Action_Name = 8
)

var VLANFlow_Action_Name_name = map[int32]string{
	0: "UNSPEC",
	1: "SET_VLAN_VID",
	2: "SET_VRF",
	3: "SET_OVID",
	4: "SET_MPLS_TYPE",
	5: "PUSH_VLAN",
	6: "POP_VLAN",
	7: "SET_MPLS_L2_TYPE",
	8: "SET_TUNNEL_ID",
}
var VLANFlow_Action_Name_value = map[string]int32{
	"UNSPEC":           0,
	"SET_VLAN_VID":     1,
	"SET_VRF":          2,
	"SET_OVID":         3,
	"SET_MPLS_TYPE":    4,
	"PUSH_VLAN":        5,
	"POP_VLAN":         6,
	"SET_MPLS_L2_TYPE": 7,
	"SET_TUNNEL_ID":    8,
}

func (x VLANFlow_Action_Name) String() string {
	return proto.EnumName(VLANFlow_Action_Name_name, int32(x))
}
func (VLANFlow_Action_Name) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 1, 0} }

type TerminationMacFlow_Action_Name int32

const (
	TerminationMacFlow_Action_UNSPEC TerminationMacFlow_Action_Name = 0
	TerminationMacFlow_Action_OUTPUT TerminationMacFlow_Action_Name = 1
)

var TerminationMacFlow_Action_Name_name = map[int32]string{
	0: "UNSPEC",
	1: "OUTPUT",
}
var TerminationMacFlow_Action_Name_value = map[string]int32{
	"UNSPEC": 0,
	"OUTPUT": 1,
}

func (x TerminationMacFlow_Action_Name) String() string {
	return proto.EnumName(TerminationMacFlow_Action_Name_name, int32(x))
}
func (TerminationMacFlow_Action_Name) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 1, 0}
}

type MPLSFlow_Action_Name int32

const (
	MPLSFlow_Action_UNSPEC               MPLSFlow_Action_Name = 0
	MPLSFlow_Action_POP_LABEL            MPLSFlow_Action_Name = 1
	MPLSFlow_Action_DEC_TTL              MPLSFlow_Action_Name = 2
	MPLSFlow_Action_COPY_TTL_IN          MPLSFlow_Action_Name = 3
	MPLSFlow_Action_COPY_TC_IN           MPLSFlow_Action_Name = 4
	MPLSFlow_Action_SET_VRF              MPLSFlow_Action_Name = 5
	MPLSFlow_Action_SET_MPLS_L2_PORT     MPLSFlow_Action_Name = 6
	MPLSFlow_Action_SET_MPLS_TYPE        MPLSFlow_Action_Name = 7
	MPLSFlow_Action_SET_TUNNEL_ID        MPLSFlow_Action_Name = 8
	MPLSFlow_Action_SET_QOS_INDEX        MPLSFlow_Action_Name = 9
	MPLSFlow_Action_SET_TRAFFIC_CLASS    MPLSFlow_Action_Name = 10
	MPLSFlow_Action_SET_L3_IN_PORT       MPLSFlow_Action_Name = 11
	MPLSFlow_Action_COPY_FIELD           MPLSFlow_Action_Name = 12
	MPLSFlow_Action_POP_CW_OR_ACH        MPLSFlow_Action_Name = 13
	MPLSFlow_Action_POP_VLAN             MPLSFlow_Action_Name = 14
	MPLSFlow_Action_POP_L2_HEADER        MPLSFlow_Action_Name = 15
	MPLSFlow_Action_SET_LMEP_ID          MPLSFlow_Action_Name = 16
	MPLSFlow_Action_SET_PROTECTION_INDEX MPLSFlow_Action_Name = 17
)

var MPLSFlow_Action_Name_name = map[int32]string{
	0:  "UNSPEC",
	1:  "POP_LABEL",
	2:  "DEC_TTL",
	3:  "COPY_TTL_IN",
	4:  "COPY_TC_IN",
	5:  "SET_VRF",
	6:  "SET_MPLS_L2_PORT",
	7:  "SET_MPLS_TYPE",
	8:  "SET_TUNNEL_ID",
	9:  "SET_QOS_INDEX",
	10: "SET_TRAFFIC_CLASS",
	11: "SET_L3_IN_PORT",
	12: "COPY_FIELD",
	13: "POP_CW_OR_ACH",
	14: "POP_VLAN",
	15: "POP_L2_HEADER",
	16: "SET_LMEP_ID",
	17: "SET_PROTECTION_INDEX",
}
var MPLSFlow_Action_Name_value = map[string]int32{
	"UNSPEC":               0,
	"POP_LABEL":            1,
	"DEC_TTL":              2,
	"COPY_TTL_IN":          3,
	"COPY_TC_IN":           4,
	"SET_VRF":              5,
	"SET_MPLS_L2_PORT":     6,
	"SET_MPLS_TYPE":        7,
	"SET_TUNNEL_ID":        8,
	"SET_QOS_INDEX":        9,
	"SET_TRAFFIC_CLASS":    10,
	"SET_L3_IN_PORT":       11,
	"COPY_FIELD":           12,
	"POP_CW_OR_ACH":        13,
	"POP_VLAN":             14,
	"POP_L2_HEADER":        15,
	"SET_LMEP_ID":          16,
	"SET_PROTECTION_INDEX": 17,
}

func (x MPLSFlow_Action_Name) String() string {
	return proto.EnumName(MPLSFlow_Action_Name_name, int32(x))
}
func (MPLSFlow_Action_Name) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1, 0} }

type UnicastRoutingFlow_Action_Name int32

const (
	UnicastRoutingFlow_Action_UNSPEC        UnicastRoutingFlow_Action_Name = 0
	UnicastRoutingFlow_Action_OUTPUT        UnicastRoutingFlow_Action_Name = 1
	UnicastRoutingFlow_Action_CLEAR_ACTIONS UnicastRoutingFlow_Action_Name = 2
	UnicastRoutingFlow_Action_DEC_TTL       UnicastRoutingFlow_Action_Name = 3
)

var UnicastRoutingFlow_Action_Name_name = map[int32]string{
	0: "UNSPEC",
	1: "OUTPUT",
	2: "CLEAR_ACTIONS",
	3: "DEC_TTL",
}
var UnicastRoutingFlow_Action_Name_value = map[string]int32{
	"UNSPEC":        0,
	"OUTPUT":        1,
	"CLEAR_ACTIONS": 2,
	"DEC_TTL":       3,
}

func (x UnicastRoutingFlow_Action_Name) String() string {
	return proto.EnumName(UnicastRoutingFlow_Action_Name_name, int32(x))
}
func (UnicastRoutingFlow_Action_Name) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 1, 0}
}

type BridgingFlow_Action_Name int32

const (
	BridgingFlow_Action_UNSPEC BridgingFlow_Action_Name = 0
	BridgingFlow_Action_OUTPUT BridgingFlow_Action_Name = 1
)

var BridgingFlow_Action_Name_name = map[int32]string{
	0: "UNSPEC",
	1: "OUTPUT",
}
var BridgingFlow_Action_Name_value = map[string]int32{
	"UNSPEC": 0,
	"OUTPUT": 1,
}

func (x BridgingFlow_Action_Name) String() string {
	return proto.EnumName(BridgingFlow_Action_Name_name, int32(x))
}
func (BridgingFlow_Action_Name) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 1, 0}
}

type PolicyACLFlow_Action_Name int32

const (
	PolicyACLFlow_Action_UNSPEC PolicyACLFlow_Action_Name = 0
	PolicyACLFlow_Action_OUTPUT PolicyACLFlow_Action_Name = 1
)

var PolicyACLFlow_Action_Name_name = map[int32]string{
	0: "UNSPEC",
	1: "OUTPUT",
}
var PolicyACLFlow_Action_Name_value = map[string]int32{
	"UNSPEC": 0,
	"OUTPUT": 1,
}

func (x PolicyACLFlow_Action_Name) String() string {
	return proto.EnumName(PolicyACLFlow_Action_Name_name, int32(x))
}
func (PolicyACLFlow_Action_Name) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 1, 0}
}

type Hello struct {
	ReId string `protobuf:"bytes,1,opt,name=re_id,json=reId" json:"re_id,omitempty"`
}

func (m *Hello) Reset()                    { *m = Hello{} }
func (m *Hello) String() string            { return proto.CompactTextString(m) }
func (*Hello) ProtoMessage()               {}
func (*Hello) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Hello) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

type DpStatus struct {
	Status DpStatus_Status `protobuf:"varint,1,opt,name=status,enum=fibcapi.DpStatus_Status" json:"status,omitempty"`
	ReId   string          `protobuf:"bytes,2,opt,name=re_id,json=reId" json:"re_id,omitempty"`
}

func (m *DpStatus) Reset()                    { *m = DpStatus{} }
func (m *DpStatus) String() string            { return proto.CompactTextString(m) }
func (*DpStatus) ProtoMessage()               {}
func (*DpStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DpStatus) GetStatus() DpStatus_Status {
	if m != nil {
		return m.Status
	}
	return DpStatus_NOP
}

func (m *DpStatus) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

type PortStatus struct {
	Status PortStatus_Status `protobuf:"varint,1,opt,name=status,enum=fibcapi.PortStatus_Status" json:"status,omitempty"`
	ReId   string            `protobuf:"bytes,2,opt,name=re_id,json=reId" json:"re_id,omitempty"`
	PortId uint32            `protobuf:"varint,3,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	Ifname string            `protobuf:"bytes,4,opt,name=ifname" json:"ifname,omitempty"`
}

func (m *PortStatus) Reset()                    { *m = PortStatus{} }
func (m *PortStatus) String() string            { return proto.CompactTextString(m) }
func (*PortStatus) ProtoMessage()               {}
func (*PortStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PortStatus) GetStatus() PortStatus_Status {
	if m != nil {
		return m.Status
	}
	return PortStatus_NOP
}

func (m *PortStatus) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *PortStatus) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *PortStatus) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

type PortConfig struct {
	Cmd    PortConfig_Cmd `protobuf:"varint,1,opt,name=cmd,enum=fibcapi.PortConfig_Cmd" json:"cmd,omitempty"`
	ReId   string         `protobuf:"bytes,2,opt,name=re_id,json=reId" json:"re_id,omitempty"`
	Ifname string         `protobuf:"bytes,3,opt,name=ifname" json:"ifname,omitempty"`
	Value  uint32         `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
}

func (m *PortConfig) Reset()                    { *m = PortConfig{} }
func (m *PortConfig) String() string            { return proto.CompactTextString(m) }
func (*PortConfig) ProtoMessage()               {}
func (*PortConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PortConfig) GetCmd() PortConfig_Cmd {
	if m != nil {
		return m.Cmd
	}
	return PortConfig_NOP
}

func (m *PortConfig) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *PortConfig) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *PortConfig) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FlowMod struct {
	Cmd   FlowMod_Cmd   `protobuf:"varint,1,opt,name=cmd,enum=fibcapi.FlowMod_Cmd" json:"cmd,omitempty"`
	Table FlowMod_Table `protobuf:"varint,2,opt,name=table,enum=fibcapi.FlowMod_Table" json:"table,omitempty"`
	ReId  string        `protobuf:"bytes,3,opt,name=re_id,json=reId" json:"re_id,omitempty"`
	// Types that are valid to be assigned to Entry:
	//	*FlowMod_Vlan
	//	*FlowMod_TermMac
	//	*FlowMod_Mpls1
	//	*FlowMod_Unicast
	//	*FlowMod_Bridging
	//	*FlowMod_Acl
	Entry isFlowMod_Entry `protobuf_oneof:"entry"`
}

func (m *FlowMod) Reset()                    { *m = FlowMod{} }
func (m *FlowMod) String() string            { return proto.CompactTextString(m) }
func (*FlowMod) ProtoMessage()               {}
func (*FlowMod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isFlowMod_Entry interface {
	isFlowMod_Entry()
}

type FlowMod_Vlan struct {
	Vlan *VLANFlow `protobuf:"bytes,4,opt,name=vlan,oneof"`
}
type FlowMod_TermMac struct {
	TermMac *TerminationMacFlow `protobuf:"bytes,5,opt,name=term_mac,json=termMac,oneof"`
}
type FlowMod_Mpls1 struct {
	Mpls1 *MPLSFlow `protobuf:"bytes,6,opt,name=mpls1,oneof"`
}
type FlowMod_Unicast struct {
	Unicast *UnicastRoutingFlow `protobuf:"bytes,7,opt,name=unicast,oneof"`
}
type FlowMod_Bridging struct {
	Bridging *BridgingFlow `protobuf:"bytes,8,opt,name=bridging,oneof"`
}
type FlowMod_Acl struct {
	Acl *PolicyACLFlow `protobuf:"bytes,9,opt,name=acl,oneof"`
}

func (*FlowMod_Vlan) isFlowMod_Entry()     {}
func (*FlowMod_TermMac) isFlowMod_Entry()  {}
func (*FlowMod_Mpls1) isFlowMod_Entry()    {}
func (*FlowMod_Unicast) isFlowMod_Entry()  {}
func (*FlowMod_Bridging) isFlowMod_Entry() {}
func (*FlowMod_Acl) isFlowMod_Entry()      {}

func (m *FlowMod) GetEntry() isFlowMod_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *FlowMod) GetCmd() FlowMod_Cmd {
	if m != nil {
		return m.Cmd
	}
	return FlowMod_NOP
}

func (m *FlowMod) GetTable() FlowMod_Table {
	if m != nil {
		return m.Table
	}
	return FlowMod_INGRESS_PORT
}

func (m *FlowMod) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *FlowMod) GetVlan() *VLANFlow {
	if x, ok := m.GetEntry().(*FlowMod_Vlan); ok {
		return x.Vlan
	}
	return nil
}

func (m *FlowMod) GetTermMac() *TerminationMacFlow {
	if x, ok := m.GetEntry().(*FlowMod_TermMac); ok {
		return x.TermMac
	}
	return nil
}

func (m *FlowMod) GetMpls1() *MPLSFlow {
	if x, ok := m.GetEntry().(*FlowMod_Mpls1); ok {
		return x.Mpls1
	}
	return nil
}

func (m *FlowMod) GetUnicast() *UnicastRoutingFlow {
	if x, ok := m.GetEntry().(*FlowMod_Unicast); ok {
		return x.Unicast
	}
	return nil
}

func (m *FlowMod) GetBridging() *BridgingFlow {
	if x, ok := m.GetEntry().(*FlowMod_Bridging); ok {
		return x.Bridging
	}
	return nil
}

func (m *FlowMod) GetAcl() *PolicyACLFlow {
	if x, ok := m.GetEntry().(*FlowMod_Acl); ok {
		return x.Acl
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FlowMod) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FlowMod_OneofMarshaler, _FlowMod_OneofUnmarshaler, _FlowMod_OneofSizer, []interface{}{
		(*FlowMod_Vlan)(nil),
		(*FlowMod_TermMac)(nil),
		(*FlowMod_Mpls1)(nil),
		(*FlowMod_Unicast)(nil),
		(*FlowMod_Bridging)(nil),
		(*FlowMod_Acl)(nil),
	}
}

func _FlowMod_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FlowMod)
	// entry
	switch x := m.Entry.(type) {
	case *FlowMod_Vlan:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vlan); err != nil {
			return err
		}
	case *FlowMod_TermMac:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TermMac); err != nil {
			return err
		}
	case *FlowMod_Mpls1:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mpls1); err != nil {
			return err
		}
	case *FlowMod_Unicast:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unicast); err != nil {
			return err
		}
	case *FlowMod_Bridging:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bridging); err != nil {
			return err
		}
	case *FlowMod_Acl:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Acl); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FlowMod.Entry has unexpected type %T", x)
	}
	return nil
}

func _FlowMod_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FlowMod)
	switch tag {
	case 4: // entry.vlan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VLANFlow)
		err := b.DecodeMessage(msg)
		m.Entry = &FlowMod_Vlan{msg}
		return true, err
	case 5: // entry.term_mac
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TerminationMacFlow)
		err := b.DecodeMessage(msg)
		m.Entry = &FlowMod_TermMac{msg}
		return true, err
	case 6: // entry.mpls1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MPLSFlow)
		err := b.DecodeMessage(msg)
		m.Entry = &FlowMod_Mpls1{msg}
		return true, err
	case 7: // entry.unicast
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnicastRoutingFlow)
		err := b.DecodeMessage(msg)
		m.Entry = &FlowMod_Unicast{msg}
		return true, err
	case 8: // entry.bridging
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BridgingFlow)
		err := b.DecodeMessage(msg)
		m.Entry = &FlowMod_Bridging{msg}
		return true, err
	case 9: // entry.acl
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PolicyACLFlow)
		err := b.DecodeMessage(msg)
		m.Entry = &FlowMod_Acl{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FlowMod_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FlowMod)
	// entry
	switch x := m.Entry.(type) {
	case *FlowMod_Vlan:
		s := proto.Size(x.Vlan)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowMod_TermMac:
		s := proto.Size(x.TermMac)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowMod_Mpls1:
		s := proto.Size(x.Mpls1)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowMod_Unicast:
		s := proto.Size(x.Unicast)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowMod_Bridging:
		s := proto.Size(x.Bridging)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FlowMod_Acl:
		s := proto.Size(x.Acl)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GroupMod struct {
	Cmd   GroupMod_Cmd   `protobuf:"varint,1,opt,name=cmd,enum=fibcapi.GroupMod_Cmd" json:"cmd,omitempty"`
	GType GroupMod_GType `protobuf:"varint,2,opt,name=g_type,json=gType,enum=fibcapi.GroupMod_GType" json:"g_type,omitempty"`
	ReId  string         `protobuf:"bytes,3,opt,name=re_id,json=reId" json:"re_id,omitempty"`
	// Types that are valid to be assigned to Entry:
	//	*GroupMod_L2Iface
	//	*GroupMod_L3Unicast
	//	*GroupMod_MplsIface
	//	*GroupMod_MplsLabel
	Entry isGroupMod_Entry `protobuf_oneof:"entry"`
}

func (m *GroupMod) Reset()                    { *m = GroupMod{} }
func (m *GroupMod) String() string            { return proto.CompactTextString(m) }
func (*GroupMod) ProtoMessage()               {}
func (*GroupMod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isGroupMod_Entry interface {
	isGroupMod_Entry()
}

type GroupMod_L2Iface struct {
	L2Iface *L2InterfaceGroup `protobuf:"bytes,4,opt,name=l2_iface,json=l2Iface,oneof"`
}
type GroupMod_L3Unicast struct {
	L3Unicast *L3UnicastGroup `protobuf:"bytes,5,opt,name=l3_unicast,json=l3Unicast,oneof"`
}
type GroupMod_MplsIface struct {
	MplsIface *MPLSInterfaceGroup `protobuf:"bytes,6,opt,name=mpls_iface,json=mplsIface,oneof"`
}
type GroupMod_MplsLabel struct {
	MplsLabel *MPLSLabelGroup `protobuf:"bytes,7,opt,name=mpls_label,json=mplsLabel,oneof"`
}

func (*GroupMod_L2Iface) isGroupMod_Entry()   {}
func (*GroupMod_L3Unicast) isGroupMod_Entry() {}
func (*GroupMod_MplsIface) isGroupMod_Entry() {}
func (*GroupMod_MplsLabel) isGroupMod_Entry() {}

func (m *GroupMod) GetEntry() isGroupMod_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *GroupMod) GetCmd() GroupMod_Cmd {
	if m != nil {
		return m.Cmd
	}
	return GroupMod_NOP
}

func (m *GroupMod) GetGType() GroupMod_GType {
	if m != nil {
		return m.GType
	}
	return GroupMod_UNSPEC
}

func (m *GroupMod) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *GroupMod) GetL2Iface() *L2InterfaceGroup {
	if x, ok := m.GetEntry().(*GroupMod_L2Iface); ok {
		return x.L2Iface
	}
	return nil
}

func (m *GroupMod) GetL3Unicast() *L3UnicastGroup {
	if x, ok := m.GetEntry().(*GroupMod_L3Unicast); ok {
		return x.L3Unicast
	}
	return nil
}

func (m *GroupMod) GetMplsIface() *MPLSInterfaceGroup {
	if x, ok := m.GetEntry().(*GroupMod_MplsIface); ok {
		return x.MplsIface
	}
	return nil
}

func (m *GroupMod) GetMplsLabel() *MPLSLabelGroup {
	if x, ok := m.GetEntry().(*GroupMod_MplsLabel); ok {
		return x.MplsLabel
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GroupMod) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GroupMod_OneofMarshaler, _GroupMod_OneofUnmarshaler, _GroupMod_OneofSizer, []interface{}{
		(*GroupMod_L2Iface)(nil),
		(*GroupMod_L3Unicast)(nil),
		(*GroupMod_MplsIface)(nil),
		(*GroupMod_MplsLabel)(nil),
	}
}

func _GroupMod_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GroupMod)
	// entry
	switch x := m.Entry.(type) {
	case *GroupMod_L2Iface:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L2Iface); err != nil {
			return err
		}
	case *GroupMod_L3Unicast:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.L3Unicast); err != nil {
			return err
		}
	case *GroupMod_MplsIface:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MplsIface); err != nil {
			return err
		}
	case *GroupMod_MplsLabel:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MplsLabel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GroupMod.Entry has unexpected type %T", x)
	}
	return nil
}

func _GroupMod_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GroupMod)
	switch tag {
	case 4: // entry.l2_iface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2InterfaceGroup)
		err := b.DecodeMessage(msg)
		m.Entry = &GroupMod_L2Iface{msg}
		return true, err
	case 5: // entry.l3_unicast
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L3UnicastGroup)
		err := b.DecodeMessage(msg)
		m.Entry = &GroupMod_L3Unicast{msg}
		return true, err
	case 6: // entry.mpls_iface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MPLSInterfaceGroup)
		err := b.DecodeMessage(msg)
		m.Entry = &GroupMod_MplsIface{msg}
		return true, err
	case 7: // entry.mpls_label
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MPLSLabelGroup)
		err := b.DecodeMessage(msg)
		m.Entry = &GroupMod_MplsLabel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GroupMod_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GroupMod)
	// entry
	switch x := m.Entry.(type) {
	case *GroupMod_L2Iface:
		s := proto.Size(x.L2Iface)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GroupMod_L3Unicast:
		s := proto.Size(x.L3Unicast)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GroupMod_MplsIface:
		s := proto.Size(x.MplsIface)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GroupMod_MplsLabel:
		s := proto.Size(x.MplsLabel)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VLANFlow struct {
	Match     *VLANFlow_Match    `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Actions   []*VLANFlow_Action `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	GotoTable uint32             `protobuf:"varint,3,opt,name=goto_table,json=gotoTable" json:"goto_table,omitempty"`
}

func (m *VLANFlow) Reset()                    { *m = VLANFlow{} }
func (m *VLANFlow) String() string            { return proto.CompactTextString(m) }
func (*VLANFlow) ProtoMessage()               {}
func (*VLANFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VLANFlow) GetMatch() *VLANFlow_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *VLANFlow) GetActions() []*VLANFlow_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *VLANFlow) GetGotoTable() uint32 {
	if m != nil {
		return m.GotoTable
	}
	return 0
}

type VLANFlow_Match struct {
	InPort  uint32 `protobuf:"varint,1,opt,name=in_port,json=inPort" json:"in_port,omitempty"`
	Vid     uint32 `protobuf:"varint,2,opt,name=vid" json:"vid,omitempty"`
	VidMask uint32 `protobuf:"varint,3,opt,name=vid_mask,json=vidMask" json:"vid_mask,omitempty"`
}

func (m *VLANFlow_Match) Reset()                    { *m = VLANFlow_Match{} }
func (m *VLANFlow_Match) String() string            { return proto.CompactTextString(m) }
func (*VLANFlow_Match) ProtoMessage()               {}
func (*VLANFlow_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *VLANFlow_Match) GetInPort() uint32 {
	if m != nil {
		return m.InPort
	}
	return 0
}

func (m *VLANFlow_Match) GetVid() uint32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *VLANFlow_Match) GetVidMask() uint32 {
	if m != nil {
		return m.VidMask
	}
	return 0
}

type VLANFlow_Action struct {
	Name  VLANFlow_Action_Name `protobuf:"varint,1,opt,name=name,enum=fibcapi.VLANFlow_Action_Name" json:"name,omitempty"`
	Value uint32               `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *VLANFlow_Action) Reset()                    { *m = VLANFlow_Action{} }
func (m *VLANFlow_Action) String() string            { return proto.CompactTextString(m) }
func (*VLANFlow_Action) ProtoMessage()               {}
func (*VLANFlow_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 1} }

func (m *VLANFlow_Action) GetName() VLANFlow_Action_Name {
	if m != nil {
		return m.Name
	}
	return VLANFlow_Action_UNSPEC
}

func (m *VLANFlow_Action) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TerminationMacFlow struct {
	Match     *TerminationMacFlow_Match    `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Actions   []*TerminationMacFlow_Action `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	GotoTable uint32                       `protobuf:"varint,3,opt,name=goto_table,json=gotoTable" json:"goto_table,omitempty"`
}

func (m *TerminationMacFlow) Reset()                    { *m = TerminationMacFlow{} }
func (m *TerminationMacFlow) String() string            { return proto.CompactTextString(m) }
func (*TerminationMacFlow) ProtoMessage()               {}
func (*TerminationMacFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TerminationMacFlow) GetMatch() *TerminationMacFlow_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *TerminationMacFlow) GetActions() []*TerminationMacFlow_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *TerminationMacFlow) GetGotoTable() uint32 {
	if m != nil {
		return m.GotoTable
	}
	return 0
}

type TerminationMacFlow_Match struct {
	InPort  uint32 `protobuf:"varint,1,opt,name=in_port,json=inPort" json:"in_port,omitempty"`
	EthType uint32 `protobuf:"varint,2,opt,name=eth_type,json=ethType" json:"eth_type,omitempty"`
	EthDst  string `protobuf:"bytes,3,opt,name=eth_dst,json=ethDst" json:"eth_dst,omitempty"`
	VlanVid uint32 `protobuf:"varint,4,opt,name=vlan_vid,json=vlanVid" json:"vlan_vid,omitempty"`
}

func (m *TerminationMacFlow_Match) Reset()                    { *m = TerminationMacFlow_Match{} }
func (m *TerminationMacFlow_Match) String() string            { return proto.CompactTextString(m) }
func (*TerminationMacFlow_Match) ProtoMessage()               {}
func (*TerminationMacFlow_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *TerminationMacFlow_Match) GetInPort() uint32 {
	if m != nil {
		return m.InPort
	}
	return 0
}

func (m *TerminationMacFlow_Match) GetEthType() uint32 {
	if m != nil {
		return m.EthType
	}
	return 0
}

func (m *TerminationMacFlow_Match) GetEthDst() string {
	if m != nil {
		return m.EthDst
	}
	return ""
}

func (m *TerminationMacFlow_Match) GetVlanVid() uint32 {
	if m != nil {
		return m.VlanVid
	}
	return 0
}

type TerminationMacFlow_Action struct {
	Name  TerminationMacFlow_Action_Name `protobuf:"varint,1,opt,name=name,enum=fibcapi.TerminationMacFlow_Action_Name" json:"name,omitempty"`
	Value uint32                         `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *TerminationMacFlow_Action) Reset()                    { *m = TerminationMacFlow_Action{} }
func (m *TerminationMacFlow_Action) String() string            { return proto.CompactTextString(m) }
func (*TerminationMacFlow_Action) ProtoMessage()               {}
func (*TerminationMacFlow_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 1} }

func (m *TerminationMacFlow_Action) GetName() TerminationMacFlow_Action_Name {
	if m != nil {
		return m.Name
	}
	return TerminationMacFlow_Action_UNSPEC
}

func (m *TerminationMacFlow_Action) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MPLSFlow struct {
	Match     *MPLSFlow_Match    `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Actions   []*MPLSFlow_Action `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	GType     GroupMod_GType     `protobuf:"varint,3,opt,name=g_type,json=gType,enum=fibcapi.GroupMod_GType" json:"g_type,omitempty"`
	GId       uint32             `protobuf:"varint,4,opt,name=g_id,json=gId" json:"g_id,omitempty"`
	GotoTable uint32             `protobuf:"varint,5,opt,name=goto_table,json=gotoTable" json:"goto_table,omitempty"`
}

func (m *MPLSFlow) Reset()                    { *m = MPLSFlow{} }
func (m *MPLSFlow) String() string            { return proto.CompactTextString(m) }
func (*MPLSFlow) ProtoMessage()               {}
func (*MPLSFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MPLSFlow) GetMatch() *MPLSFlow_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *MPLSFlow) GetActions() []*MPLSFlow_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *MPLSFlow) GetGType() GroupMod_GType {
	if m != nil {
		return m.GType
	}
	return GroupMod_UNSPEC
}

func (m *MPLSFlow) GetGId() uint32 {
	if m != nil {
		return m.GId
	}
	return 0
}

func (m *MPLSFlow) GetGotoTable() uint32 {
	if m != nil {
		return m.GotoTable
	}
	return 0
}

type MPLSFlow_Match struct {
	Bos   bool   `protobuf:"varint,1,opt,name=bos" json:"bos,omitempty"`
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
}

func (m *MPLSFlow_Match) Reset()                    { *m = MPLSFlow_Match{} }
func (m *MPLSFlow_Match) String() string            { return proto.CompactTextString(m) }
func (*MPLSFlow_Match) ProtoMessage()               {}
func (*MPLSFlow_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *MPLSFlow_Match) GetBos() bool {
	if m != nil {
		return m.Bos
	}
	return false
}

func (m *MPLSFlow_Match) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

type MPLSFlow_Action struct {
	Name  MPLSFlow_Action_Name `protobuf:"varint,1,opt,name=name,enum=fibcapi.MPLSFlow_Action_Name" json:"name,omitempty"`
	Value uint32               `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *MPLSFlow_Action) Reset()                    { *m = MPLSFlow_Action{} }
func (m *MPLSFlow_Action) String() string            { return proto.CompactTextString(m) }
func (*MPLSFlow_Action) ProtoMessage()               {}
func (*MPLSFlow_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

func (m *MPLSFlow_Action) GetName() MPLSFlow_Action_Name {
	if m != nil {
		return m.Name
	}
	return MPLSFlow_Action_UNSPEC
}

func (m *MPLSFlow_Action) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type UnicastRoutingFlow struct {
	Match  *UnicastRoutingFlow_Match  `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Action *UnicastRoutingFlow_Action `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	GType  GroupMod_GType             `protobuf:"varint,3,opt,name=g_type,json=gType,enum=fibcapi.GroupMod_GType" json:"g_type,omitempty"`
	GId    uint32                     `protobuf:"varint,4,opt,name=g_id,json=gId" json:"g_id,omitempty"`
}

func (m *UnicastRoutingFlow) Reset()                    { *m = UnicastRoutingFlow{} }
func (m *UnicastRoutingFlow) String() string            { return proto.CompactTextString(m) }
func (*UnicastRoutingFlow) ProtoMessage()               {}
func (*UnicastRoutingFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UnicastRoutingFlow) GetMatch() *UnicastRoutingFlow_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *UnicastRoutingFlow) GetAction() *UnicastRoutingFlow_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *UnicastRoutingFlow) GetGType() GroupMod_GType {
	if m != nil {
		return m.GType
	}
	return GroupMod_UNSPEC
}

func (m *UnicastRoutingFlow) GetGId() uint32 {
	if m != nil {
		return m.GId
	}
	return 0
}

type UnicastRoutingFlow_Match struct {
	IpDst string `protobuf:"bytes,1,opt,name=ip_dst,json=ipDst" json:"ip_dst,omitempty"`
	Vrf   uint32 `protobuf:"varint,2,opt,name=vrf" json:"vrf,omitempty"`
}

func (m *UnicastRoutingFlow_Match) Reset()                    { *m = UnicastRoutingFlow_Match{} }
func (m *UnicastRoutingFlow_Match) String() string            { return proto.CompactTextString(m) }
func (*UnicastRoutingFlow_Match) ProtoMessage()               {}
func (*UnicastRoutingFlow_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

func (m *UnicastRoutingFlow_Match) GetIpDst() string {
	if m != nil {
		return m.IpDst
	}
	return ""
}

func (m *UnicastRoutingFlow_Match) GetVrf() uint32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

type UnicastRoutingFlow_Action struct {
	Name  UnicastRoutingFlow_Action_Name `protobuf:"varint,1,opt,name=name,enum=fibcapi.UnicastRoutingFlow_Action_Name" json:"name,omitempty"`
	Value uint32                         `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *UnicastRoutingFlow_Action) Reset()                    { *m = UnicastRoutingFlow_Action{} }
func (m *UnicastRoutingFlow_Action) String() string            { return proto.CompactTextString(m) }
func (*UnicastRoutingFlow_Action) ProtoMessage()               {}
func (*UnicastRoutingFlow_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 1} }

func (m *UnicastRoutingFlow_Action) GetName() UnicastRoutingFlow_Action_Name {
	if m != nil {
		return m.Name
	}
	return UnicastRoutingFlow_Action_UNSPEC
}

func (m *UnicastRoutingFlow_Action) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type BridgingFlow struct {
	Match  *BridgingFlow_Match  `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Action *BridgingFlow_Action `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
}

func (m *BridgingFlow) Reset()                    { *m = BridgingFlow{} }
func (m *BridgingFlow) String() string            { return proto.CompactTextString(m) }
func (*BridgingFlow) ProtoMessage()               {}
func (*BridgingFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BridgingFlow) GetMatch() *BridgingFlow_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *BridgingFlow) GetAction() *BridgingFlow_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

type BridgingFlow_Match struct {
	EthDst   string `protobuf:"bytes,1,opt,name=eth_dst,json=ethDst" json:"eth_dst,omitempty"`
	VlanVid  uint32 `protobuf:"varint,2,opt,name=vlan_vid,json=vlanVid" json:"vlan_vid,omitempty"`
	TunnelId uint32 `protobuf:"varint,3,opt,name=tunnel_id,json=tunnelId" json:"tunnel_id,omitempty"`
}

func (m *BridgingFlow_Match) Reset()                    { *m = BridgingFlow_Match{} }
func (m *BridgingFlow_Match) String() string            { return proto.CompactTextString(m) }
func (*BridgingFlow_Match) ProtoMessage()               {}
func (*BridgingFlow_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *BridgingFlow_Match) GetEthDst() string {
	if m != nil {
		return m.EthDst
	}
	return ""
}

func (m *BridgingFlow_Match) GetVlanVid() uint32 {
	if m != nil {
		return m.VlanVid
	}
	return 0
}

func (m *BridgingFlow_Match) GetTunnelId() uint32 {
	if m != nil {
		return m.TunnelId
	}
	return 0
}

type BridgingFlow_Action struct {
	Name  BridgingFlow_Action_Name `protobuf:"varint,1,opt,name=name,enum=fibcapi.BridgingFlow_Action_Name" json:"name,omitempty"`
	Value uint32                   `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *BridgingFlow_Action) Reset()                    { *m = BridgingFlow_Action{} }
func (m *BridgingFlow_Action) String() string            { return proto.CompactTextString(m) }
func (*BridgingFlow_Action) ProtoMessage()               {}
func (*BridgingFlow_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 1} }

func (m *BridgingFlow_Action) GetName() BridgingFlow_Action_Name {
	if m != nil {
		return m.Name
	}
	return BridgingFlow_Action_UNSPEC
}

func (m *BridgingFlow_Action) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type PolicyACLFlow struct {
	Match  *PolicyACLFlow_Match  `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Action *PolicyACLFlow_Action `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
}

func (m *PolicyACLFlow) Reset()                    { *m = PolicyACLFlow{} }
func (m *PolicyACLFlow) String() string            { return proto.CompactTextString(m) }
func (*PolicyACLFlow) ProtoMessage()               {}
func (*PolicyACLFlow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PolicyACLFlow) GetMatch() *PolicyACLFlow_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *PolicyACLFlow) GetAction() *PolicyACLFlow_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

type PolicyACLFlow_Match struct {
	IpDst string `protobuf:"bytes,1,opt,name=ip_dst,json=ipDst" json:"ip_dst,omitempty"`
	Vrf   uint32 `protobuf:"varint,2,opt,name=vrf" json:"vrf,omitempty"`
}

func (m *PolicyACLFlow_Match) Reset()                    { *m = PolicyACLFlow_Match{} }
func (m *PolicyACLFlow_Match) String() string            { return proto.CompactTextString(m) }
func (*PolicyACLFlow_Match) ProtoMessage()               {}
func (*PolicyACLFlow_Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *PolicyACLFlow_Match) GetIpDst() string {
	if m != nil {
		return m.IpDst
	}
	return ""
}

func (m *PolicyACLFlow_Match) GetVrf() uint32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

type PolicyACLFlow_Action struct {
	Name  PolicyACLFlow_Action_Name `protobuf:"varint,1,opt,name=name,enum=fibcapi.PolicyACLFlow_Action_Name" json:"name,omitempty"`
	Value uint32                    `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *PolicyACLFlow_Action) Reset()                    { *m = PolicyACLFlow_Action{} }
func (m *PolicyACLFlow_Action) String() string            { return proto.CompactTextString(m) }
func (*PolicyACLFlow_Action) ProtoMessage()               {}
func (*PolicyACLFlow_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 1} }

func (m *PolicyACLFlow_Action) GetName() PolicyACLFlow_Action_Name {
	if m != nil {
		return m.Name
	}
	return PolicyACLFlow_Action_UNSPEC
}

func (m *PolicyACLFlow_Action) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 0x0vvvPPPP (vvv:VID, PPPP:port_id)
type L2InterfaceGroup struct {
	PortId          uint32 `protobuf:"varint,1,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	VlanVid         uint32 `protobuf:"varint,2,opt,name=vlan_vid,json=vlanVid" json:"vlan_vid,omitempty"`
	VlanTranslation bool   `protobuf:"varint,3,opt,name=vlan_translation,json=vlanTranslation" json:"vlan_translation,omitempty"`
}

func (m *L2InterfaceGroup) Reset()                    { *m = L2InterfaceGroup{} }
func (m *L2InterfaceGroup) String() string            { return proto.CompactTextString(m) }
func (*L2InterfaceGroup) ProtoMessage()               {}
func (*L2InterfaceGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *L2InterfaceGroup) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *L2InterfaceGroup) GetVlanVid() uint32 {
	if m != nil {
		return m.VlanVid
	}
	return 0
}

func (m *L2InterfaceGroup) GetVlanTranslation() bool {
	if m != nil {
		return m.VlanTranslation
	}
	return false
}

// 0x20VVNNNN (VV:VRF, NNNN:NeId)
type L3UnicastGroup struct {
	NeId    uint32 `protobuf:"varint,1,opt,name=ne_id,json=neId" json:"ne_id,omitempty"`
	PortId  uint32 `protobuf:"varint,2,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	VlanVid uint32 `protobuf:"varint,3,opt,name=vlan_vid,json=vlanVid" json:"vlan_vid,omitempty"`
	EthDst  string `protobuf:"bytes,4,opt,name=eth_dst,json=ethDst" json:"eth_dst,omitempty"`
	EthSrc  string `protobuf:"bytes,5,opt,name=eth_src,json=ethSrc" json:"eth_src,omitempty"`
}

func (m *L3UnicastGroup) Reset()                    { *m = L3UnicastGroup{} }
func (m *L3UnicastGroup) String() string            { return proto.CompactTextString(m) }
func (*L3UnicastGroup) ProtoMessage()               {}
func (*L3UnicastGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *L3UnicastGroup) GetNeId() uint32 {
	if m != nil {
		return m.NeId
	}
	return 0
}

func (m *L3UnicastGroup) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *L3UnicastGroup) GetVlanVid() uint32 {
	if m != nil {
		return m.VlanVid
	}
	return 0
}

func (m *L3UnicastGroup) GetEthDst() string {
	if m != nil {
		return m.EthDst
	}
	return ""
}

func (m *L3UnicastGroup) GetEthSrc() string {
	if m != nil {
		return m.EthSrc
	}
	return ""
}

// 0x90VVNNNN (VV:VRF, NNNN:NeId)
type MPLSInterfaceGroup struct {
	NeId    uint32 `protobuf:"varint,1,opt,name=ne_id,json=neId" json:"ne_id,omitempty"`
	PortId  uint32 `protobuf:"varint,2,opt,name=port_id,json=portId" json:"port_id,omitempty"`
	VlanVid uint32 `protobuf:"varint,3,opt,name=vlan_vid,json=vlanVid" json:"vlan_vid,omitempty"`
	EthDst  string `protobuf:"bytes,4,opt,name=eth_dst,json=ethDst" json:"eth_dst,omitempty"`
	EthSrc  string `protobuf:"bytes,5,opt,name=eth_src,json=ethSrc" json:"eth_src,omitempty"`
}

func (m *MPLSInterfaceGroup) Reset()                    { *m = MPLSInterfaceGroup{} }
func (m *MPLSInterfaceGroup) String() string            { return proto.CompactTextString(m) }
func (*MPLSInterfaceGroup) ProtoMessage()               {}
func (*MPLSInterfaceGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MPLSInterfaceGroup) GetNeId() uint32 {
	if m != nil {
		return m.NeId
	}
	return 0
}

func (m *MPLSInterfaceGroup) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *MPLSInterfaceGroup) GetVlanVid() uint32 {
	if m != nil {
		return m.VlanVid
	}
	return 0
}

func (m *MPLSInterfaceGroup) GetEthDst() string {
	if m != nil {
		return m.EthDst
	}
	return ""
}

func (m *MPLSInterfaceGroup) GetEthSrc() string {
	if m != nil {
		return m.EthSrc
	}
	return ""
}

// 0x9x0LLLLL (LLLL: label)
type MPLSLabelGroup struct {
	DstId    uint32         `protobuf:"varint,1,opt,name=dst_id,json=dstId" json:"dst_id,omitempty"`
	NewLabel uint32         `protobuf:"varint,2,opt,name=new_label,json=newLabel" json:"new_label,omitempty"`
	NeId     uint32         `protobuf:"varint,3,opt,name=ne_id,json=neId" json:"ne_id,omitempty"`
	NewDstId uint32         `protobuf:"varint,4,opt,name=new_dst_id,json=newDstId" json:"new_dst_id,omitempty"`
	GType    GroupMod_GType `protobuf:"varint,5,opt,name=g_type,json=gType,enum=fibcapi.GroupMod_GType" json:"g_type,omitempty"`
}

func (m *MPLSLabelGroup) Reset()                    { *m = MPLSLabelGroup{} }
func (m *MPLSLabelGroup) String() string            { return proto.CompactTextString(m) }
func (*MPLSLabelGroup) ProtoMessage()               {}
func (*MPLSLabelGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MPLSLabelGroup) GetDstId() uint32 {
	if m != nil {
		return m.DstId
	}
	return 0
}

func (m *MPLSLabelGroup) GetNewLabel() uint32 {
	if m != nil {
		return m.NewLabel
	}
	return 0
}

func (m *MPLSLabelGroup) GetNeId() uint32 {
	if m != nil {
		return m.NeId
	}
	return 0
}

func (m *MPLSLabelGroup) GetNewDstId() uint32 {
	if m != nil {
		return m.NewDstId
	}
	return 0
}

func (m *MPLSLabelGroup) GetGType() GroupMod_GType {
	if m != nil {
		return m.GType
	}
	return GroupMod_UNSPEC
}

func init() {
	proto.RegisterType((*Hello)(nil), "fibcapi.Hello")
	proto.RegisterType((*DpStatus)(nil), "fibcapi.DpStatus")
	proto.RegisterType((*PortStatus)(nil), "fibcapi.PortStatus")
	proto.RegisterType((*PortConfig)(nil), "fibcapi.PortConfig")
	proto.RegisterType((*FlowMod)(nil), "fibcapi.FlowMod")
	proto.RegisterType((*GroupMod)(nil), "fibcapi.GroupMod")
	proto.RegisterType((*VLANFlow)(nil), "fibcapi.VLANFlow")
	proto.RegisterType((*VLANFlow_Match)(nil), "fibcapi.VLANFlow.Match")
	proto.RegisterType((*VLANFlow_Action)(nil), "fibcapi.VLANFlow.Action")
	proto.RegisterType((*TerminationMacFlow)(nil), "fibcapi.TerminationMacFlow")
	proto.RegisterType((*TerminationMacFlow_Match)(nil), "fibcapi.TerminationMacFlow.Match")
	proto.RegisterType((*TerminationMacFlow_Action)(nil), "fibcapi.TerminationMacFlow.Action")
	proto.RegisterType((*MPLSFlow)(nil), "fibcapi.MPLSFlow")
	proto.RegisterType((*MPLSFlow_Match)(nil), "fibcapi.MPLSFlow.Match")
	proto.RegisterType((*MPLSFlow_Action)(nil), "fibcapi.MPLSFlow.Action")
	proto.RegisterType((*UnicastRoutingFlow)(nil), "fibcapi.UnicastRoutingFlow")
	proto.RegisterType((*UnicastRoutingFlow_Match)(nil), "fibcapi.UnicastRoutingFlow.Match")
	proto.RegisterType((*UnicastRoutingFlow_Action)(nil), "fibcapi.UnicastRoutingFlow.Action")
	proto.RegisterType((*BridgingFlow)(nil), "fibcapi.BridgingFlow")
	proto.RegisterType((*BridgingFlow_Match)(nil), "fibcapi.BridgingFlow.Match")
	proto.RegisterType((*BridgingFlow_Action)(nil), "fibcapi.BridgingFlow.Action")
	proto.RegisterType((*PolicyACLFlow)(nil), "fibcapi.PolicyACLFlow")
	proto.RegisterType((*PolicyACLFlow_Match)(nil), "fibcapi.PolicyACLFlow.Match")
	proto.RegisterType((*PolicyACLFlow_Action)(nil), "fibcapi.PolicyACLFlow.Action")
	proto.RegisterType((*L2InterfaceGroup)(nil), "fibcapi.L2InterfaceGroup")
	proto.RegisterType((*L3UnicastGroup)(nil), "fibcapi.L3UnicastGroup")
	proto.RegisterType((*MPLSInterfaceGroup)(nil), "fibcapi.MPLSInterfaceGroup")
	proto.RegisterType((*MPLSLabelGroup)(nil), "fibcapi.MPLSLabelGroup")
	proto.RegisterEnum("fibcapi.FFM", FFM_name, FFM_value)
	proto.RegisterEnum("fibcapi.DpStatus_Status", DpStatus_Status_name, DpStatus_Status_value)
	proto.RegisterEnum("fibcapi.PortStatus_Status", PortStatus_Status_name, PortStatus_Status_value)
	proto.RegisterEnum("fibcapi.PortConfig_Cmd", PortConfig_Cmd_name, PortConfig_Cmd_value)
	proto.RegisterEnum("fibcapi.FlowMod_Cmd", FlowMod_Cmd_name, FlowMod_Cmd_value)
	proto.RegisterEnum("fibcapi.FlowMod_Table", FlowMod_Table_name, FlowMod_Table_value)
	proto.RegisterEnum("fibcapi.GroupMod_Cmd", GroupMod_Cmd_name, GroupMod_Cmd_value)
	proto.RegisterEnum("fibcapi.GroupMod_GType", GroupMod_GType_name, GroupMod_GType_value)
	proto.RegisterEnum("fibcapi.VLANFlow_Action_Name", VLANFlow_Action_Name_name, VLANFlow_Action_Name_value)
	proto.RegisterEnum("fibcapi.TerminationMacFlow_Action_Name", TerminationMacFlow_Action_Name_name, TerminationMacFlow_Action_Name_value)
	proto.RegisterEnum("fibcapi.MPLSFlow_Action_Name", MPLSFlow_Action_Name_name, MPLSFlow_Action_Name_value)
	proto.RegisterEnum("fibcapi.UnicastRoutingFlow_Action_Name", UnicastRoutingFlow_Action_Name_name, UnicastRoutingFlow_Action_Name_value)
	proto.RegisterEnum("fibcapi.BridgingFlow_Action_Name", BridgingFlow_Action_Name_name, BridgingFlow_Action_Name_value)
	proto.RegisterEnum("fibcapi.PolicyACLFlow_Action_Name", PolicyACLFlow_Action_Name_name, PolicyACLFlow_Action_Name_value)
}

func init() { proto.RegisterFile("fibcapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0x5b, 0x6f, 0xdb, 0xc8,
	0x15, 0x0e, 0x45, 0x51, 0x97, 0xe3, 0xc8, 0x19, 0x4f, 0xec, 0x58, 0xb1, 0x9d, 0x45, 0x56, 0x05,
	0x9a, 0x64, 0xd1, 0x7a, 0x63, 0xba, 0x7b, 0x41, 0x1b, 0x14, 0x55, 0x28, 0xca, 0x26, 0x40, 0x89,
	0x2c, 0x45, 0xd9, 0xeb, 0xa7, 0x29, 0x2d, 0xd1, 0x0e, 0xbb, 0x12, 0xa5, 0x4a, 0xb4, 0x83, 0xb4,
	0x2f, 0xbd, 0x3c, 0xf6, 0xa1, 0xd7, 0x05, 0xb6, 0xe8, 0x3e, 0x16, 0x6d, 0x81, 0xbe, 0xf4, 0xa1,
	0x7f, 0xa1, 0x40, 0xd1, 0x3f, 0xd1, 0xfe, 0x80, 0xfe, 0x88, 0xe2, 0x0c, 0x49, 0x91, 0x94, 0xe4,
	0x4b, 0xb0, 0x05, 0xfa, 0xa4, 0x99, 0x33, 0xdf, 0x39, 0x73, 0x78, 0xce, 0x37, 0xe7, 0xcc, 0x08,
	0x2a, 0x67, 0xde, 0x69, 0xcf, 0x19, 0x7b, 0xbb, 0xe3, 0xc9, 0x28, 0x18, 0xd1, 0x62, 0x34, 0xad,
	0xed, 0x80, 0x74, 0xe8, 0x0e, 0x06, 0x23, 0x7a, 0x1f, 0xa4, 0x89, 0xcb, 0xbc, 0x7e, 0x55, 0x78,
	0x2c, 0x3c, 0x2d, 0x5b, 0xf9, 0x89, 0xab, 0xf5, 0x6b, 0x3f, 0x84, 0x52, 0x63, 0xdc, 0x09, 0x9c,
	0xe0, 0x62, 0x4a, 0x9f, 0x43, 0x61, 0xca, 0x47, 0x1c, 0xb1, 0x2a, 0x57, 0x77, 0x63, 0x93, 0x31,
	0x64, 0x37, 0xfc, 0xb1, 0x22, 0x5c, 0x62, 0x32, 0x97, 0x32, 0xf9, 0x04, 0x0a, 0x91, 0xc1, 0x22,
	0x88, 0x6d, 0xc3, 0x24, 0x77, 0x68, 0x19, 0x24, 0xb5, 0x6d, 0xab, 0x16, 0x11, 0x70, 0xa8, 0xab,
	0xf5, 0x23, 0x95, 0xe4, 0x6a, 0x7f, 0x11, 0x00, 0xcc, 0xd1, 0x24, 0x88, 0xd0, 0xf2, 0xdc, 0xf6,
	0x5b, 0xb3, 0xed, 0x13, 0xd0, 0x6d, 0x1c, 0xa0, 0x9b, 0x50, 0x1c, 0x8f, 0x26, 0x01, 0x8a, 0xc5,
	0xc7, 0xc2, 0xd3, 0x8a, 0x55, 0xc0, 0xa9, 0xd6, 0xa7, 0x0f, 0xa0, 0xe0, 0x9d, 0xf9, 0xce, 0xd0,
	0xad, 0xe6, 0x39, 0x3c, 0x9a, 0xd5, 0xbe, 0xb2, 0xe8, 0x71, 0x01, 0x72, 0x5d, 0x93, 0x08, 0xb4,
	0x04, 0xf9, 0x86, 0x71, 0xdc, 0x4e, 0x79, 0xab, 0x8c, 0xfc, 0x33, 0xef, 0x9c, 0x3e, 0x03, 0xb1,
	0x37, 0xec, 0x47, 0xae, 0x6e, 0x66, 0x5c, 0x0d, 0x11, 0xbb, 0xca, 0xb0, 0x6f, 0x21, 0x66, 0xb9,
	0x93, 0x89, 0x2f, 0x62, 0xda, 0x17, 0xba, 0x0e, 0xd2, 0xa5, 0x33, 0xb8, 0x08, 0x5d, 0xac, 0x58,
	0xe1, 0xa4, 0xf6, 0x3e, 0x88, 0xca, 0xb0, 0x9f, 0xb8, 0x57, 0x04, 0xb1, 0xde, 0x68, 0x10, 0x81,
	0x02, 0x14, 0x5a, 0x46, 0x43, 0x6b, 0x9e, 0x90, 0x1c, 0x8e, 0x1b, 0xaa, 0xae, 0xda, 0x2a, 0x11,
	0x6b, 0xff, 0x92, 0xa0, 0xd8, 0x1c, 0x8c, 0x5e, 0xb7, 0x46, 0x7d, 0xfa, 0xd5, 0xb4, 0xab, 0xeb,
	0x33, 0x57, 0xa3, 0xe5, 0xc4, 0xcf, 0xaf, 0x81, 0x14, 0x38, 0xa7, 0x03, 0x97, 0xfb, 0xb9, 0x2a,
	0x3f, 0x58, 0x40, 0xda, 0xb8, 0x6a, 0x85, 0xa0, 0xe4, 0xab, 0xc4, 0xd4, 0x57, 0x3d, 0x81, 0xfc,
	0xe5, 0xc0, 0xf1, 0xb9, 0xf3, 0x2b, 0xf2, 0xda, 0xcc, 0xc2, 0x91, 0x5e, 0x6f, 0xa3, 0x95, 0xc3,
	0x3b, 0x16, 0x07, 0xd0, 0x8f, 0xa1, 0x14, 0xb8, 0x93, 0x21, 0x1b, 0x3a, 0xbd, 0xaa, 0xc4, 0xc1,
	0xdb, 0x33, 0xb0, 0xed, 0x4e, 0x86, 0x9e, 0xef, 0x04, 0xde, 0xc8, 0x6f, 0x39, 0xbd, 0x48, 0xad,
	0x88, 0xf0, 0x96, 0xd3, 0xa3, 0xcf, 0x40, 0x1a, 0x8e, 0x07, 0xd3, 0xbd, 0x6a, 0x61, 0x6e, 0x8f,
	0x96, 0xa9, 0x77, 0x22, 0x70, 0x88, 0xa0, 0x1f, 0x41, 0xf1, 0xc2, 0xf7, 0x7a, 0xce, 0x34, 0xa8,
	0x16, 0xe7, 0xf6, 0xe8, 0x86, 0x72, 0x6b, 0x74, 0x11, 0x78, 0xfe, 0x79, 0xbc, 0x47, 0x84, 0xa6,
	0xfb, 0x50, 0x3a, 0x9d, 0x78, 0xfd, 0x73, 0xcf, 0x3f, 0xaf, 0x96, 0xb8, 0xe6, 0xc6, 0x4c, 0xf3,
	0x65, 0xb4, 0x10, 0xe9, 0xcc, 0x80, 0xf4, 0x3d, 0x10, 0x9d, 0xde, 0xa0, 0x5a, 0xe6, 0xf8, 0x07,
	0x29, 0x46, 0x0c, 0xbc, 0xde, 0x9b, 0xba, 0xa2, 0x47, 0x0a, 0x08, 0xaa, 0x75, 0x6f, 0x93, 0xcf,
	0x35, 0xa8, 0x84, 0x63, 0xd6, 0xb1, 0x2d, 0x4d, 0xb1, 0x89, 0x98, 0x4a, 0x71, 0x1e, 0x97, 0xc3,
	0x71, 0xbc, 0x2c, 0xd5, 0xfe, 0x2d, 0x80, 0xc4, 0x93, 0x44, 0x09, 0xdc, 0xd5, 0xda, 0x07, 0x96,
	0xda, 0xe9, 0x30, 0xd3, 0xb0, 0x6c, 0x72, 0x07, 0x99, 0x8c, 0x59, 0x20, 0x40, 0xef, 0x42, 0xc9,
	0x56, 0xad, 0x16, 0x6b, 0xd5, 0x15, 0xb2, 0x4e, 0x57, 0xa0, 0xa8, 0xef, 0x33, 0xfb, 0xc4, 0x54,
	0xc9, 0x06, 0x9e, 0x4e, 0x0c, 0xe3, 0x73, 0xb2, 0x19, 0x0f, 0xf7, 0x48, 0x35, 0x1e, 0xca, 0xe4,
	0x21, 0xda, 0xc5, 0x21, 0x8b, 0x55, 0xb6, 0xe9, 0x3a, 0x90, 0x50, 0x52, 0x7f, 0xa9, 0xea, 0xcc,
	0xb6, 0xba, 0x1d, 0x9b, 0xec, 0xd0, 0x0a, 0x94, 0xb9, 0x94, 0x83, 0x1e, 0xd1, 0xfb, 0x70, 0xaf,
	0xdb, 0xd6, 0x94, 0x7a, 0xc7, 0x66, 0x96, 0xd1, 0xb5, 0xb5, 0xf6, 0x01, 0x79, 0x87, 0x6e, 0xc0,
	0x5a, 0xab, 0xab, 0xdb, 0x59, 0xf1, 0x53, 0x74, 0xef, 0xa5, 0xa5, 0x35, 0x0e, 0x70, 0x26, 0xd3,
	0x55, 0x00, 0xd3, 0xd0, 0x35, 0xe5, 0x84, 0xd5, 0x15, 0x9d, 0xbc, 0x78, 0x59, 0x04, 0xc9, 0xf5,
	0x83, 0xc9, 0x9b, 0xda, 0xdf, 0x0a, 0x50, 0x3a, 0x98, 0x8c, 0x2e, 0xc6, 0x48, 0xf1, 0x27, 0x69,
	0x8a, 0x27, 0xb9, 0x8a, 0xd7, 0x13, 0x8e, 0xef, 0x42, 0xe1, 0x9c, 0x05, 0x6f, 0xc6, 0x31, 0xc9,
	0x37, 0x17, 0xb1, 0x07, 0xf6, 0x9b, 0xb1, 0x6b, 0x49, 0xe7, 0xf8, 0xb3, 0x9c, 0xe5, 0x1f, 0x42,
	0x69, 0x20, 0x33, 0xef, 0xcc, 0xe9, 0xb9, 0x11, 0xd3, 0x1f, 0xce, 0xcc, 0xe8, 0xb2, 0xe6, 0x07,
	0xee, 0x04, 0xd7, 0xb8, 0x45, 0xa4, 0xd5, 0x40, 0xd6, 0x70, 0x4e, 0x3f, 0x06, 0x18, 0xec, 0xb3,
	0x98, 0x92, 0x21, 0xed, 0x13, 0x07, 0xf4, 0xfd, 0x88, 0x94, 0xb1, 0x5e, 0x79, 0x10, 0x4b, 0xe8,
	0x0b, 0x00, 0xa4, 0x74, 0xb4, 0x67, 0x61, 0x8e, 0xcc, 0x18, 0xe9, 0x85, 0x5d, 0xcb, 0xa8, 0x30,
	0xdb, 0x97, 0x6b, 0x0f, 0x9c, 0x53, 0x77, 0x10, 0x1d, 0x85, 0xcd, 0x8c, 0xb6, 0x8e, 0x2b, 0x19,
	0x4d, 0x2e, 0x79, 0xfb, 0xba, 0xf3, 0x99, 0x08, 0x12, 0x0f, 0x20, 0x4a, 0xbb, 0xed, 0x8e, 0xa9,
	0x2a, 0xe4, 0x0e, 0xb2, 0x46, 0x97, 0x99, 0x86, 0x2d, 0xa0, 0x59, 0x57, 0x54, 0x22, 0x60, 0x5a,
	0x75, 0x99, 0x59, 0xea, 0xb1, 0xa5, 0xd9, 0x2a, 0x21, 0x7c, 0xbe, 0xcf, 0x22, 0x8e, 0x90, 0xc7,
	0x91, 0xc6, 0x8c, 0x1e, 0xe4, 0x39, 0xd2, 0x42, 0x97, 0x59, 0x53, 0x37, 0x8c, 0x06, 0xf9, 0x0e,
	0x5f, 0xdf, 0x4f, 0x59, 0x34, 0x23, 0x49, 0xa2, 0xf1, 0xbd, 0x88, 0xd9, 0xaa, 0xd2, 0x32, 0xc9,
	0x98, 0x6e, 0x00, 0xd1, 0x65, 0x66, 0x1c, 0xa9, 0x96, 0x5e, 0x3f, 0x61, 0x4d, 0x9d, 0x75, 0x15,
	0xf2, 0x63, 0x61, 0x51, 0xdc, 0x52, 0xc8, 0x4f, 0xe6, 0xc5, 0x2d, 0x05, 0xd1, 0x3f, 0x5d, 0x22,
	0x6e, 0x29, 0xe4, 0x67, 0x02, 0xbd, 0x0f, 0xab, 0x9c, 0xec, 0x89, 0x3b, 0xbf, 0x14, 0x28, 0x81,
	0x95, 0xf0, 0x5c, 0xc8, 0xec, 0xc8, 0x6c, 0x93, 0x5f, 0xa5, 0x24, 0xfb, 0x5c, 0xf2, 0x6b, 0x81,
	0xae, 0x45, 0xa7, 0xc9, 0xee, 0xb6, 0xdb, 0xaa, 0xbe, 0x47, 0x7e, 0x33, 0x2f, 0x92, 0xc9, 0x6f,
	0x31, 0x56, 0xe1, 0x59, 0xea, 0x1c, 0xd7, 0x4d, 0xf2, 0x99, 0x40, 0xef, 0x42, 0x91, 0xcf, 0x9b,
	0x4d, 0xf2, 0xc7, 0x64, 0x95, 0x7f, 0xe7, 0x9f, 0x05, 0xba, 0x0e, 0xf7, 0x74, 0x99, 0x75, 0x9b,
	0x29, 0x6f, 0xfe, 0x2a, 0x24, 0xc7, 0xe6, 0x9f, 0x22, 0x94, 0xe2, 0x6a, 0x4c, 0xbf, 0x0e, 0xd2,
	0xd0, 0x09, 0x7a, 0xaf, 0xf8, 0xc1, 0x49, 0x73, 0x22, 0x46, 0xec, 0xb6, 0x70, 0xd9, 0x0a, 0x51,
	0x54, 0x86, 0xa2, 0xd3, 0xc3, 0xb2, 0x3c, 0xad, 0xe6, 0x1e, 0x8b, 0x4f, 0x57, 0x52, 0x37, 0x84,
	0x99, 0x42, 0x9d, 0x03, 0xac, 0x18, 0x48, 0x1f, 0x01, 0x9c, 0x8f, 0x82, 0x11, 0x0b, 0x3b, 0x4b,
	0xd8, 0x8f, 0xcb, 0x28, 0xe1, 0x75, 0x6a, 0xab, 0x05, 0x12, 0xdf, 0x02, 0x9b, 0xb6, 0xe7, 0x33,
	0x6c, 0xd4, 0xdc, 0x99, 0x8a, 0x55, 0xf0, 0x7c, 0x6c, 0xa6, 0x94, 0x80, 0x78, 0x19, 0xf5, 0xce,
	0x8a, 0x85, 0x43, 0xfa, 0x10, 0x4a, 0x97, 0x5e, 0x9f, 0x0d, 0x9d, 0xe9, 0xa7, 0x91, 0xc1, 0xe2,
	0xa5, 0xd7, 0x6f, 0x39, 0xd3, 0x4f, 0xb7, 0xfe, 0x23, 0x40, 0x21, 0xf4, 0x80, 0xee, 0x41, 0x9e,
	0xb7, 0xd7, 0xb0, 0x26, 0x3c, 0xba, 0xca, 0xd3, 0xdd, 0xb6, 0x33, 0x74, 0xad, 0x7c, 0xb6, 0xf7,
	0xe6, 0xd2, 0xbd, 0xf7, 0x73, 0x01, 0xf2, 0x08, 0x9a, 0x67, 0x74, 0x47, 0xb5, 0x19, 0x1a, 0x63,
	0x47, 0x1a, 0x9e, 0x88, 0x15, 0x28, 0x72, 0x89, 0xd5, 0x24, 0x39, 0x24, 0x2b, 0x4e, 0x0c, 0x5c,
	0x12, 0xb1, 0x52, 0xe3, 0x2c, 0x29, 0x88, 0x79, 0xac, 0x8f, 0x66, 0xb7, 0x73, 0xc8, 0x0d, 0x10,
	0x09, 0xf1, 0xa6, 0x61, 0x86, 0xb3, 0x02, 0x96, 0xd4, 0x19, 0x5e, 0x97, 0x43, 0x95, 0x62, 0x6c,
	0x25, 0x24, 0x06, 0xd3, 0x1a, 0xa4, 0x54, 0xfb, 0x5c, 0x04, 0xba, 0xd8, 0x2d, 0xe9, 0x47, 0xd9,
	0xb4, 0xbe, 0x7b, 0x4d, 0x67, 0xcd, 0x26, 0xf8, 0xc5, 0x7c, 0x82, 0x6b, 0xd7, 0xa9, 0xbe, 0x65,
	0xaa, 0x47, 0x37, 0xa6, 0xfa, 0x21, 0x94, 0xdc, 0xe0, 0x55, 0x52, 0x9e, 0x2b, 0x56, 0xd1, 0x0d,
	0x5e, 0xf1, 0x6a, 0xb2, 0x09, 0x38, 0x64, 0xfd, 0x69, 0x10, 0xdf, 0x97, 0xdc, 0xe0, 0x55, 0x63,
	0xca, 0x75, 0xf0, 0x42, 0xc1, 0x90, 0x23, 0xf9, 0x88, 0x0c, 0x03, 0xc7, 0x3f, 0xf2, 0xfa, 0x5b,
	0x3f, 0x9a, 0x71, 0xe1, 0x5b, 0x19, 0x2e, 0x3c, 0xb9, 0xf9, 0xa3, 0x6e, 0x66, 0xc5, 0x3b, 0x4b,
	0x48, 0x01, 0x50, 0x30, 0xba, 0xb6, 0xd9, 0xb5, 0x89, 0x50, 0xfb, 0x42, 0x82, 0x52, 0x7c, 0x23,
	0xb9, 0xfa, 0x9c, 0xc5, 0x88, 0x5b, 0x9f, 0xb3, 0x99, 0xc2, 0x7c, 0xf0, 0x93, 0xc6, 0x26, 0xde,
	0xaa, 0xb1, 0xad, 0x41, 0xfe, 0x9c, 0xcd, 0x62, 0x26, 0x9e, 0x6b, 0xfd, 0xb9, 0xfc, 0x49, 0xf3,
	0xf9, 0x7b, 0x3f, 0xce, 0x1f, 0x01, 0xf1, 0x74, 0x14, 0xde, 0xd2, 0x4b, 0x16, 0x0e, 0x31, 0x44,
	0x61, 0x6f, 0x89, 0x42, 0xc4, 0x27, 0x5b, 0xbf, 0x13, 0x6f, 0x3c, 0x8c, 0x73, 0x9f, 0x73, 0x73,
	0xd8, 0xff, 0x9e, 0x5b, 0x12, 0x77, 0x3c, 0x4c, 0x86, 0x19, 0xde, 0x40, 0xc2, 0x93, 0xd8, 0x50,
	0x15, 0x66, 0xdb, 0x3a, 0xc9, 0xd1, 0x7b, 0xb0, 0xa2, 0x18, 0xe6, 0x09, 0xce, 0x98, 0xd6, 0x26,
	0x22, 0x76, 0x9a, 0x50, 0xa0, 0xe0, 0x3c, 0x9f, 0x3e, 0xb7, 0xd2, 0xfc, 0xc9, 0xe3, 0x57, 0xa7,
	0xc2, 0xe2, 0xf9, 0x5d, 0x76, 0x18, 0x63, 0xd1, 0x77, 0x0d, 0x6c, 0x04, 0x0d, 0xf5, 0x13, 0x52,
	0xc6, 0x1b, 0x0e, 0x47, 0x59, 0xf5, 0x66, 0x53, 0x53, 0x98, 0xa2, 0xd7, 0x3b, 0x1d, 0x02, 0x94,
	0xc2, 0x2a, 0x8a, 0x79, 0x03, 0x0b, 0xf7, 0x58, 0x99, 0xb9, 0xd5, 0xd4, 0x54, 0xbd, 0x41, 0xee,
	0xa2, 0x35, 0xfc, 0x26, 0xe5, 0x98, 0x19, 0x16, 0xab, 0x2b, 0x87, 0xa4, 0x92, 0x29, 0x12, 0xab,
	0x31, 0x40, 0x97, 0xd9, 0xa1, 0x5a, 0x6f, 0xa8, 0x16, 0xb9, 0x87, 0xdf, 0xca, 0xed, 0xb6, 0x54,
	0x13, 0x5d, 0x22, 0xb4, 0x0a, 0xeb, 0x28, 0x30, 0x2d, 0xc3, 0x56, 0x15, 0x5b, 0x33, 0xda, 0x91,
	0x67, 0x6b, 0xb5, 0x2f, 0x44, 0xa0, 0x8b, 0x77, 0xe0, 0xab, 0x2b, 0xc7, 0x22, 0x36, 0x4b, 0xd9,
	0x6f, 0x42, 0x21, 0x64, 0x22, 0x4f, 0x57, 0xba, 0x70, 0x2c, 0xd1, 0x8c, 0xb8, 0x1b, 0x69, 0xfc,
	0x0f, 0xa8, 0xbb, 0xf5, 0x3c, 0xe6, 0xe6, 0x06, 0x14, 0xbc, 0x31, 0x2f, 0x13, 0xe1, 0x2b, 0x57,
	0xf2, 0xc6, 0x58, 0x25, 0xb0, 0x89, 0x4c, 0xce, 0x66, 0x4d, 0x64, 0x72, 0xb6, 0xf5, 0x7b, 0xe1,
	0xc6, 0xea, 0x70, 0xa5, 0xe7, 0x37, 0xd3, 0xf4, 0xdb, 0xd7, 0x57, 0x07, 0x4c, 0x9e, 0xa2, 0xab,
	0x75, 0xcc, 0x2c, 0xa6, 0xa5, 0x43, 0x72, 0x69, 0xd6, 0x8a, 0xb5, 0x7f, 0xe4, 0xe0, 0x6e, 0xfa,
	0xa1, 0x41, 0xf7, 0xb2, 0x89, 0xd9, 0x5e, 0xfa, 0x1c, 0xc9, 0xa6, 0xe4, 0x1b, 0x73, 0x29, 0xd9,
	0x59, 0xae, 0x93, 0x4d, 0xc6, 0xd6, 0x27, 0xa9, 0x2a, 0x1d, 0x57, 0x5c, 0xe1, 0xca, 0x8a, 0x9b,
	0xcb, 0x54, 0x5c, 0xba, 0x0d, 0xe5, 0xe0, 0xc2, 0xf7, 0xdd, 0x41, 0xf2, 0xf6, 0x2e, 0x85, 0x02,
	0xad, 0xbf, 0x75, 0x31, 0x0b, 0xf8, 0x07, 0x99, 0x80, 0xbf, 0x7b, 0x9d, 0x5f, 0x5f, 0xbe, 0x10,
	0xff, 0x21, 0x07, 0x95, 0xcc, 0x1b, 0x8c, 0xca, 0xd9, 0x58, 0xee, 0x2c, 0x7f, 0xaa, 0x65, 0x83,
	0xf9, 0xc1, 0x5c, 0x30, 0x1f, 0x5d, 0xa1, 0x34, 0x17, 0xcd, 0xb7, 0xe7, 0xe5, 0xe5, 0x2c, 0x4a,
	0x1f, 0x66, 0xa2, 0x54, 0xbb, 0x76, 0xc3, 0x2f, 0x1f, 0xa6, 0x1f, 0xe0, 0xd5, 0x36, 0xfb, 0x88,
	0x48, 0xff, 0x91, 0x22, 0x64, 0xfe, 0x48, 0xb9, 0x86, 0x02, 0xcf, 0x80, 0xf0, 0xa5, 0x60, 0xe2,
	0xf8, 0xd3, 0x01, 0x6f, 0xad, 0x9c, 0x09, 0x25, 0xeb, 0x1e, 0xca, 0xed, 0x44, 0x5c, 0xfb, 0xb9,
	0x00, 0xab, 0xd9, 0x47, 0x0f, 0x3e, 0xb7, 0x7c, 0x37, 0xd9, 0x2f, 0xef, 0xcf, 0xfd, 0x9f, 0x93,
	0xbb, 0xd2, 0x0d, 0x31, 0xeb, 0x46, 0x8a, 0xbd, 0xf9, 0x0c, 0x7b, 0xa3, 0x85, 0xe9, 0x24, 0xfc,
	0xdf, 0x21, 0x5c, 0xe8, 0x4c, 0x7a, 0xb5, 0x5f, 0x08, 0x40, 0x17, 0x1f, 0x52, 0xff, 0x4f, 0x8f,
	0xfe, 0x24, 0x84, 0xef, 0x8a, 0xe4, 0x71, 0x86, 0x34, 0xea, 0x4f, 0x53, 0x09, 0x91, 0xfa, 0x53,
	0xdc, 0x76, 0x1b, 0xca, 0xbe, 0xfb, 0x9a, 0xa5, 0x7b, 0x70, 0xc9, 0x77, 0x5f, 0x73, 0xc5, 0xe4,
	0x0b, 0xc4, 0xd4, 0x17, 0xec, 0x00, 0xa0, 0x46, 0x64, 0x2c, 0x3f, 0x53, 0x69, 0x70, 0x7b, 0x49,
	0x45, 0x96, 0x6e, 0x53, 0x91, 0xdf, 0xfb, 0x3e, 0x88, 0xcd, 0x66, 0x2b, 0xc3, 0xad, 0x32, 0x48,
	0x87, 0xaa, 0xae, 0x1b, 0x44, 0xc0, 0xb6, 0x84, 0x4d, 0x8e, 0x75, 0xec, 0xba, 0xdd, 0xed, 0x84,
	0x3d, 0x99, 0x0b, 0x14, 0xa3, 0xdd, 0xd4, 0x0e, 0x88, 0x88, 0x9d, 0xad, 0xa9, 0x1b, 0xc7, 0xac,
	0x65, 0x34, 0xc2, 0xbb, 0xf1, 0x81, 0x65, 0x74, 0x4d, 0x3e, 0x95, 0x70, 0xda, 0x30, 0x63, 0xe5,
	0xc2, 0x69, 0x81, 0xff, 0xbf, 0xb9, 0xff, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x46, 0x4b,
	0x19, 0xf0, 0x14, 0x00, 0x00,
}
